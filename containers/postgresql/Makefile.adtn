# The following variables can be modified to build alternative images/containers so
# that a single docker engine can run multiple instances of different XOS instances
ifeq (0,${MAKELEVEL})
# The docker image prefix
IMAGE_PREFIX?=xosproject
# The container name prefix (use something like chip- to customize)
CONTAINER_PREFIX?=
endif

DB_IMAGE_NAME?=${IMAGE_PREFIX}/xos-postgres
DB_CONTAINER_NAME?=${CONTAINER_PREFIX}${DB_CONTAINER_SUFFIX}
SQL_PORT_NUMBER?=5432

NO_DOCKER_CACHE?=
#NO_DOCKER_CACHE?=--no-cache

######################################################################################
# Reassign higher level variables to common ones so most of our makefiles look similar

IMAGE:=${DB_IMAGE_NAME}
CONTAINER:=${DB_CONTAINER_NAME}

######################################################################################
# Build only if it does not exist
IS_BUILT := $(shell docker images | grep --color=never ^${IMAGE}\\s >/dev/null 2>&1 && echo 1 || echo 0)
ifeq ($(IS_BUILT), 1)
	BUILD_CMD:=@echo "${IMAGE} has already been built"
else
	BUILD_CMD:=docker build ${NO_DOCKER_CACHE} --rm=true -t ${IMAGE} .
endif

######################################################################################
# Run only if it is not already running
ifeq ($(IS_BUILT), 1)
IS_RUNNING := $(shell docker ps | grep --color=never \\s${CONTAINER}$ >/dev/null 2>&1 && echo 1 || echo 0)
ifeq ($(IS_RUNNING), 1)
	RUN_CMD:=@echo "${CONTAINER} is already running"
else
	RUN_CMD:=docker run -d -p ${SQL_PORT_NUMBER}:5432 --name ${CONTAINER} ${IMAGE}
endif
else
	RUN_CMD:=@echo "${IMAGE} has not been built"
endif

######################################################################################

.PHONY: build
build:
	@echo "Building Database container"
	${BUILD_CMD}
	@echo Completed build of Database container

.PHONY: run
run:
	@echo "Running Database container"
	${RUN_CMD}

.PHONY: start
start: ; docker start ${CONTAINER}

.PHONY: stop
stop: ; docker stop ${CONTAINER}

.PHONY: backup
backupvol: ; docker run --volumes-from ${CONTAINER} -v /backup:/backup postgres tar cvf /backup/backup-postgres.tar /var/lib/postgresql

.PHONY: restore
restorevol: ; docker run --volumes-from ${CONTAINER} -v /backup:/backup postgres cd /var/lib/postgresql && tar xvf /backup/backup-postgres.tar

.PHONY: clean
clean: clean-container clean-image

.PHONY: clean-container
clean-container:
	-sudo docker rm -f ${CONTAINER}

.PHONY: clean-image
clean-image: clean-container
	-sudo docker rmi -f ${IMAGE}

# The following variables can be modified to build alternative images/containers so
# that a single docker engine can run multiple instances of different XOS instances

ifeq (0,${MAKELEVEL})
# The docker image prefix
IMAGE_PREFIX?=xosproject
# The container name prefix (use something like chip- to customize)
CONTAINER_PREFIX?=
DB_CONTAINER_SUFFIX:=xos-db-postgres
export OS_CONTROLLER_IP=10.17.173.1
export OS_COMPUTE_NODES=os10-compute01.test.adtran.com/10.17.173.1
CERTS?=/usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
endif

VAOS_IMAGE_NAME?=${IMAGE_PREFIX}/vaos
GUI_CONTAINER_NAME?=${CONTAINER_PREFIX}vaos-service
NO_DOCKER_CACHE?=false
OS_COMPUTE_HOST_OPTS=`../../mk-add-hosts-opts.sh ${OS_COMPUTE_NODES}`

######################################################################################
# Reassign and compute higher level variables to common ones so most of our makefiles look similar

IMAGE:=${VAOS_IMAGE_NAME}
CONTAINER:=${GUI_CONTAINER_NAME}
SQL_SERVER_IP:=$(shell docker inspect --format '{{ .NetworkSettings.IPAddress }}' ${CONTAINER_PREFIX}${DB_CONTAINER_SUFFIX})
SQL_SERVER_PORT:=$(shell ../../getDbDockerPort.sh ${CONTAINER_PREFIX}${DB_CONTAINER_SUFFIX})

######################################################################################
# Run only if it is not already running.

IS_RUNNING := $(shell docker ps | grep --color=never \\s${CONTAINER}$ >/dev/null 2>&1 && echo 1 || echo 0)
ifeq ($(IS_RUNNING), 1)
	RUN_CMD:=@echo "${CONTAINER} is already running"
else
	#RUN_CMD:=docker run -d --name ${CONTAINER} -v ${CERTS} \
	#	--add-host=sql-server:${SQL_SERVER_IP} \
	#	${OS_COMPUTE_HOST_OPTS} \
	#	--add-host=os-controller:${OS_CONTROLLER_IP} ${IMAGE}

	RUN_CMD:=sudo docker-compose run xos python /opt/xos/tosca/run.py padmin@vicci.org /root/setup/docker-compose.yaml

endif

######################################################################################

.PHONY: build
build:
	@echo "docker-compose is being used, so build & run are one step..."

.PHONY: run
run:
	${RUN_CMD}

.PHONY: start
start: ; sudo MYIP=$(MYIP) docker-compose start

.PHONY: stop
stop: ; sudo MYIP=$(MYIP) docker-compose stop

.PHONY: clean
clean: clean-container clean-image

.PHONY: clean-container
clean-container:
	-sudo docker-compose stop

.PHONY: clean-image
clean-image: clean-container
	-sudo docker-compose rm

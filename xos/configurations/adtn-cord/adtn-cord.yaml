tosca_definitions_version: tosca_simple_yaml_1_0

description: Just enough Tosca to get the vAOS slice running on the CORD POD and
             define an initial subscriber.

imports:
   - custom_types/xos.yaml

topology_template:
  node_templates:
    ########################################################################
    # CORD Services

    service#vaos:
      type: tosca.nodes.VaosService
      properties:
          view_url: /admin/cord/voltservice/$id$/
          public_key: { get_artifact: [ SELF, pubkey, LOCAL_FILE] }
          private_key_fn: /opt/xos/synchronizers/vaos/vaos_private_key
          replaces: service_vaos
          tacker_template: /opt/xos/syncronizers/vaos/
      artifacts:
          pubkey: /opt/xos/synchronizers/vaos/vaos_public_key

    Private:
      type: tosca.nodes.NetworkTemplate

    management:
      type: tosca.nodes.network.Network.XOS
      properties:
          no-create: true
          no-delete: true
          no-update: true

    mysite:
      type: tosca.nodes.Site

    label_vaos:
      type: tosca.nodes.NodeLabel

    ########################################################################
    # Networks required by the ADTRAN CORD setup (that are not created by TOSCA)
    #mysite_vaos-access:
    #  type: tosca.nodes.network.Network
    #  properties:
    #      ip_version: 4
    #  requirements:
    #      - network_template:
    #          node: Private
    #          relationship: tosca.relationships.UsesNetworkTemplate
    #      - owner:
    #          node: mysite_vaos
    #          relationship: tosca.relationships.MemberOfSlice
    #      - connection:
    #          node: mysite_vaos
    #          relationship: tosca.relationships.ConnectsToSlice

    ########################################################################
    # CORD Slices
    mysite_vaos:
      description: vAOS Controller Slice
      type: tosca.nodes.Slice
      properties:
          network: noauto
      requirements:
          - vaos_service:
              node: service#vaos
              relationship: tosca.relationships.MemberOfService
          - site:
              node: mysite
              relationship: tosca.relationships.MemberOfSite
          - management:
              node: management
              relationship: tosca.relationships.ConnectsToNetwork

    ########################################################################
    # Let's add a user who can be administrator of the household
    #johndoe@myhouse.com:
    #  type: tosca.nodes.User
    #  properties:
    #      password:  letmein
    #      firstname: john
    #      lastname:  doe
    #  requirements:
    #      - site:
    #          node: mysite
    #          relationship: tosca.relationships.MemberOfSite
    #
    ########################################################################
    # A subscriber

    123 Main Street:
        type: tosca.nodes.VaosTenant
        properties:
            # SSID: A unique vAOS Tenant service ID
            service_specific_id: 123
            # Tags. Use -1 for 'unttagged'.
            s_tag: -1
            c_tag: 111
            # Authentication flag
            authenticated: False
            # Number of seconds to cache an unauthenticated client until the
            # vAOS instance is actually torn down.
            cache_seconds: 0

        requirements:
            - provider_service:
                node: service#vaos
                relationship: tosca.relationships.MemberOfService
            - subscriber:
                node: 123 Main Street
                relationship: tosca.relationships.BelongsToSubscriber
